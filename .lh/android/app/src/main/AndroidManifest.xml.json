{
    "sourceFile": "android/app/src/main/AndroidManifest.xml",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1636996599557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1636996599557,
            "name": "Commit-0",
            "content": "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.example.covid_19_live_tracker\">\n  <!-- io.flutter.app.FlutterApplication is an android.app.Application that\n         calls FlutterMain.startInitialization(this); in its onCreate method.\n         In most cases you can leave this as-is, but you if you want to provide\n         additional functionality it is fine to subclass or reimplement\n         FlutterApplication and put your custom class here. -->\n  <application android:name=\"io.flutter.app.FlutterApplication\" android:label=\"covid_19_live_tracker\" android:icon=\"@mipmap/ic_launcher\">\n    <activity android:name=\".MainActivity\" android:launchMode=\"singleTop\" android:theme=\"@style/LaunchTheme\" android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\" android:hardwareAccelerated=\"true\" android:windowSoftInputMode=\"adjustResize\">\n      <!-- Specifies an Android theme to apply to this Activity as soon as\n                 the Android process has started. This theme is visible to the user\n                 while the Flutter UI initializes. After that, this theme continues\n                 to determine the Window background behind the Flutter UI. -->\n      <meta-data android:name=\"io.flutter.embedding.android.NormalTheme\" android:resource=\"@style/NormalTheme\" />\n      <!-- Displays an Android View that continues showing the launch screen\n                 Drawable until Flutter paints its first frame, then this splash\n                 screen fades out. A splash screen is useful to avoid any visual\n                 gap between the end of Android's launch screen and the painting of\n                 Flutter's first frame. -->\n      <meta-data android:name=\"io.flutter.embedding.android.SplashScreenDrawable\" android:resource=\"@drawable/launch_background\" />\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n      </intent-filter>\n    </activity>\n    <!-- Don't delete the meta-data below.\n             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->\n    <meta-data android:name=\"flutterEmbedding\" android:value=\"2\" />\n  </application>\n  <uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n</manifest>"
        }
    ]
}